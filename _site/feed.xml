<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esther Leytush</title>
    <description>Building myself into a fullstack Rails dev by building awesome projects.</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 14 Jun 2016 00:07:57 -0400</pubDate>
    <lastBuildDate>Tue, 14 Jun 2016 00:07:57 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Bucket sort</title>
        <description>&lt;p&gt;I started off not really understanding how bucket sort works; the concept of partitioning
  items by placing them into different buckets made sense, but what is the way in which the
  program decides on bucket sizes? I couldn&#39;t understand the logic even when I looked at
  examples of others&#39; bucket sorts. So I decided to design my solution in a way that didn&#39;t
  pre-make buckets before partitioning. Instead, it sends items to their corresponding indexes&amp;mdash;so
  66 would be sent to &lt;code&gt;bucket[66]&lt;/code&gt;, etc.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/bed7e13afb85c22f321938a5ccd57967.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Does this still count as a bucket sort? Is this an example of another type of sorting
  algorithm? It makes sense and seems to be optimized for speed, as claiming new slots in
  an existing array should be faster than doing calculations to figure out where an item should go. Either way, it&#39;s simple and it works, so it&#39;s satisfying enough, even if it
  isn&#39;t an actual bucket sort.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/05/bucket-sort.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/05/bucket-sort.html</guid>
        
        
      </item>
    
      <item>
        <title>JavaScript browser grocery list</title>
        <description>&lt;p&gt;My cohort is preparing for week 1 in Phase 1 as of next week, and it&#39;s all review this week.
  As part of that, I thought I would try branching out into using JavaScript in the browser. Here&#39;s
  a grocery list function that works, rather annoyingly, through pop-ups, alerting and prompting
  the user to the state of their grocery list.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/99027193d2cf15a319034d204c277133.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The more I work with JavaScript, the more irritating I find it. For example, when I tried running this
  script in the command line just to see if there were any syntax errors that I hadn&#39;t caught
  by eye, it refused to move past what I swear was a made-up error at line 2, which
  had not thrown an error previously, nor threw an error when I gave up and ran the code in
  the browser console directly. I keep having these struggles with JavaScript over what looks
  like absolutely nothing. I hope we come to terms with one another soon.&lt;/p&gt;

&lt;p&gt;That said, I was able to get a little more clarity in working with strings, objects, and
  loops in JavaScript, allowing for this second iteration to be a better laid out
  program.
&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/04/javascript-browser-grocery-list.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/04/javascript-browser-grocery-list.html</guid>
        
        
      </item>
    
      <item>
        <title>Binary conversions</title>
        <description>&lt;p&gt;One of the first computing concepts I was introduced to when I started learning to program was
  the concept of binary numbers. I had known already that computers understood everything on a
  fundamendal level in terms of binary code, but I hadn&#39;t understood how standard numbers in base-10, for example,
  could be understood in base-2. Converting numbers to their representations in different bases was
  a bizarre concept to me until I was shown me how they are broken down: how 111 turned
  into 7, for example. Once I finally worked through it mentally, I sat down and wrote two
  scripts to translate a base-10 number
  into base-2, and vice versa, and then rewrote these programs in JavaScript. To start, here&#39;s the Ruby
  script that converts a base-2 number into a base-10 one:&lt;/p&gt;
  &lt;script src=&quot;https://gist.github.com/mindplace/85e7052a78b70878ec103be9b24b6e2b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Understanding that the binary number needed to be reversed before it could be translated was an
  important part of conceptualizing it: that a binary number like 001 needs to be seen as 100 in order
  to be passed as a number to the program, but that 100 must then be reversed in order to be translated. Here&#39;s the
  same script in JavaScript:
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/163fe26593fd000990dc95b860d02b31.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Conceptually, I&#39;ve been trying to stick to the same logic in Ruby as well as JavaScript; I&#39;m not sure if
  this really helps me branch out into the way JavaScript actually differs conceptually from Ruby, but it&#39;s
  certainly helped speed me up to solving algorithmic problems in JavaScript.&lt;/p&gt;
&lt;p&gt;So far the programs I wrote to convert a base-2 to base-10 numbers were short. By contrast,
  my solution for converting a base-10 to base-2 turned out to be much longer:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/6098697725c7c0dd6aed9bc615d37a56.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I couldn&#39;t think of how to slot in the appropriate 1&#39;s into their places without counting
  up in powers of 2, but that solution did work well. At some point I want to return to it and
  think about it again to see if I could solve it in a better way. Here&#39;s the same solution in
  JavaScript:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/740684d0745b8249bd4707d9064a26dd.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;That&#39;s all for today! Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/03/binary-conversions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/03/binary-conversions.html</guid>
        
        
      </item>
    
      <item>
        <title>Bootcamp blog: regular expressions</title>
        <description>&lt;p&gt;To say that using regular expressions is like hitting your face on the keyboard until something
  matches is not an entirely untrue statement, if you were to look at some examples:&lt;/p&gt;
&lt;p&gt;matching an IP address:&lt;br&gt;&lt;code&gt;\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;finding email addresses:&lt;br&gt; &lt;code&gt;\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;finding an &#39;Al&#39; next to the largest number in a text:&lt;br&gt;&lt;code&gt;\bAL\w*( \w\.)? S\w+ \d{2,},\d+&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I think the picture here is becoming clearer: Regular Expressions, or RegExps, are
  valuable, albeit indecipherable, strings of code that work to find or find-and-replace
  certain strings inside of other strings. They&#39;re useful when dealing with large strings,
  but also in a lot of other places. They&#39;re the tool of the power-user who parses text
  with minimal code and maximum results.&lt;/p&gt;
&lt;p&gt;The term &#39;regular expression&#39; was coined by Warren McCulloch and Walter Pitts, a neuroscientist and logician respectively, who in 1943 published a paper in Mathematical Biophysics which attempted to understand &#39;how the human brain could produce complex patterns using simple cells that are bound together&#39; (&lt;a href=&quot;http://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&quot;&gt;link&lt;/a&gt;). Among other ideas, the paper laid out the term Regular Expression, which by some amazing jump between disciplines came to influence computer scientists (as did various other ideas from other disciplines). In 1968, Ken Thompson descriped a RegExp compiler&amp;mdash;the idea was to allow users to match patterns in text files. This functionality was then implemented in the text editor &#39;ed&#39;. To do a RegExp search in ed, you had to write &lt;code&gt;g/&amp;lt;regular expression&amp;gt;/p&lt;/code&gt;: essentially, &lt;code&gt;g/re/p&lt;/code&gt;. &lt;code&gt;g&lt;/code&gt; meant &#39;global search&#39; and &lt;code&gt;p&lt;/code&gt; meant &#39;print&#39;, This command eventually resulted in a form we use &lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Enumerable.html#method-i-grep&quot;&gt;even in Ruby&lt;/a&gt;: &lt;code&gt;grep&lt;/code&gt;; we got it via Unix, and then Perl, but other languages like Java also implemented RegExps.
&lt;/p&gt;
&lt;p&gt;More honestly, RegExps are really a great and valuable tool. They tend to be difficult to remember, use, and understand, but also powerful and
often speedy. I have dipped the barest toe into the waters of regular expressions, but I intend to learn to use them myself with Ruby and text parsing.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;Resources:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://regex.bastardsbook.com/&quot;&gt;&lt;i&gt;The Bastards Book of Regular Expressions&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://regexone.com/&quot;&gt;RegexOne&lt;/a&gt;: an interactive tutorial&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexcrossword.com/&quot;&gt;Regex Crossword&lt;/a&gt;: regular expression challenges&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@leighsn/verbal-expressions-in-ruby-fb8a912221e2#.jzr5f62hl&quot;&gt;&quot;Verbal Expressions in Ruby&quot;&lt;/a&gt;: a gem to make regexes easier to write&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/categories/regular-expressions&quot;&gt;envatotuts+&lt;/a&gt;: regular
  expression tutorials&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/you-dont-know-anything-about-regular-expressions--net-7869&quot;&gt;&quot;You Don&#39;t Know Anything About Regular Expressions: a Complete Guide&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&quot;&gt;
  &quot;Regular Expressions: a brief history&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp1.html&quot;&gt;&quot;Regular Expression Matching Can Be Simple And Fast (but is slow in Java, Perl, PHP, Python, Ruby, ...)&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Wikipedia: regular expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/02/bootcamp-blog-regular-expressions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/02/bootcamp-blog-regular-expressions.html</guid>
        
        
      </item>
    
      <item>
        <title>Bootcamp blog: enumerable cheatsheet</title>
        <description>&lt;p&gt;Today&#39;s post is a cheatsheet I did for week 8 of Dev Bootcamp. We&#39;re coming up quickly
now onto Phase1, the intense on-campus immersive phase, and we&#39;re all preparing ourselves
and our Ruby skills for that. This week was an introduction to SQL and some work in
JavaScript, Ruby, and HTML/CSS. Here&#39;s the page I made, see it yourself &lt;a href=&quot;http://mindplace.github.io/static-pages/cheat-sheet/enumerable-cheatsheet&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/enumerable-cheatsheet.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;I struggled for a very long time with the footer. I couldn&#39;t figure out how to have
  it stick to the bottom even if the page contents weren&#39;t enough to push it there naturally.
  In the end I couldn&#39;t figure it out and I shrugged my shoulders and fixed the rest of it
  to my liking. I&#39;m going to bring it up to a friend at bootcamp who has CSS experience.
  In the meantime, I&#39;m enjoying my other design choices.
&lt;/p&gt;
&lt;p&gt;
  The HTML and CSS is &lt;a href=&quot;https://github.com/mindplace/static-pages&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/01/bootcamp-blog-enumerable-cheatsheet.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/01/bootcamp-blog-enumerable-cheatsheet.html</guid>
        
        
      </item>
    
      <item>
        <title>Ruby inheritance and interconnected classes</title>
        <description>&lt;p&gt;To learn a bit more about inheritance in Ruby, we were given this assigment to work through, in
  which we modeled Dev Bootcamp&#39;s cohort structure and schedule. I created a GlobalCohort class,
  a sub-class to that called LocalCohort, which was city-specific, and an additional Student
  class. Here&#39;s GlobalCohort:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/e2be6ed10ac4a15b3e1c5db63cfea1fd.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I think the interesting part for this class is the way it is able to model and give information
  about the phase schedule based on the start date. I&#39;ve worked with the Date class only a bit, when
  I created the &lt;a href=&quot;/2016/03/02/deadline-counter.html&quot;&gt;deadline counter&lt;/a&gt;, so this was a welcome continuation of that. And now
for LocalCohort:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/64a5705fd064d52049e7fb5887abe9fb.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This class was meant to be much simpler; the important difference between it and GlobalCohort,
  in my design, was to make LocalCohort the location where I would add Student objects, so that
  students were always organized by their LocalCohorts, or cities. Now for Student:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/5ea54b21728f1eaf49b5c91204f330e4.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Also simple. This one needed to be able to store the student&#39;s information, like name, email, and
  history of events like quizzes, and to be able to know which global cohort and which city the
  student was going to belong to. Everything else was designed to be found for the entire group, and
  therefore stored in GlobalCohort. Output:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/20c59c90cd03075efe99dd49ef9d295c.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Conceptually, this gave me a ton of problems, because I went into this challenge thinking that
  it was possible for instances in a class chain&amp;mdash;skippers to nyc to esther_leytush&amp;mdash;would be aware
  of each other in both directions, and have access to attributes. But of course this isn&#39;t the case;
  instances of Student don&#39;t and in fact should not have access to the attributes of instances of LocalCohort,
  for example, because they should not be able to change the LocalCohort&#39;s state. Once this clicked for me,
  I stopped getting so many &lt;code&gt;nil&lt;/code&gt; errors, which was nice. And I definitely think I got some
good practice with interconnected classes and modeling real-world scenarios.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/29/ruby-inheritance-and-interconnected-classes.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/29/ruby-inheritance-and-interconnected-classes.html</guid>
        
        
      </item>
    
      <item>
        <title>Finding primes with the sieve of Eratosthenes</title>
        <description>    &lt;p&gt;Before I started Dev Bootcamp, one of the ways I prepared myself was by spending
      quite a lot of time solving various challenges, and it wasn&#39;t long before I came accross
      &lt;a href=&quot;https://projecteuler.net/archives&quot;&gt;Project Euler&lt;/a&gt;. I wasn&#39;t able to get too far
      with them, maybe only the first dozen or so, as the difficulty curve rose really quickly for me,
      and my 3 levels of Calculus in college weren&#39;t coming back to me at all easily.&lt;/p&gt;
    &lt;p&gt;One of the most memorable challenges I did for Project Euler was finding the sums of all
      the prime numbers below 2 million. This was a difficult problem for me because my
      brute-force solution&amp;mdash;checking each
      consecutive number for primeness by taking its factors&amp;mdash;was just incredibly slow, and therefore
      disqualified as a solution. (And by slow I mean it would have taken days.) I finally caved in
      and created a sieve of Eratosthenes as StackOverflow commentors suggested. To do that, I spent
      quite a lot of time staring at &lt;a href=&quot;https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes&quot;&gt;the
      lovely animation on the Wikipedia page&lt;/a&gt; for the sieve. I understood that the sieve didn&#39;t
      check for primeness; it instead assumed that multiples of given nums were already not going to be
      prime. Thanks to that, I finally came up with my solution for the prime problem:&lt;/p&gt;
      &lt;script src=&quot;https://gist.github.com/mindplace/cf2c73c507b7711cd22d.js&quot;&gt;&lt;/script&gt;
      &lt;p&gt;I was so very proud of this solution. It&#39;s short, easy on computational load, and is optimized
        by the way it uses squares: it starts resetting multiples from the square of the current num,
        and breaks as soon as the square of the current num exceeds the length of the range. I&#39;m happy with
        this solution! So a few months later, I decided to implement the sieve in JavaScript as well,
        except this one is meant to find the nth prime:&lt;/p&gt;
        &lt;script src=&quot;https://gist.github.com/mindplace/ad2d6dd52d89e32f6813.js&quot;&gt;&lt;/script&gt;
      &lt;p&gt;First off, the JavaScript solution is much more verbose; to do things like populate the initial
        range, or to find the next larger number to be the current num, it takes more lines and more
        words to do so. But even in JavaScript it is an elegant solution that is much shorter and simpler
        than it could otherwise be. So I think I can count myself as still happy with it.&lt;/p&gt;
</description>
        <pubDate>Mon, 28 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/28/finding-primes-with-the-sieve-of-eratosthenes.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/28/finding-primes-with-the-sieve-of-eratosthenes.html</guid>
        
        
      </item>
    
      <item>
        <title>Binary search</title>
        <description>&lt;p&gt;Moving on to writing my own binary search seemed like it made sense after spending time with
  sorting algorithms, but it turned out to be tougher than I expected. The essential concept
  of how binary search works, thanks to &lt;a href=&quot;https://www.youtube.com/watch?v=JQhciTuD3E8&quot;&gt;this video&lt;/a&gt; made plenty of sense;
  the difficulty was to not just locate a given item in a sorted list, but to actually return
  its original location.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/d9bda84fffb63271e967.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The difficulty started with the fact that I initially designed my algorithm in a way where
  it took ever smaller slices of the given array, bounded by either the first item and the midpoint
  item, or the midpoint item and the last item, in the last iteration of the slice. This meant that
  finding the item was easy, but the only location for it would be its location in the final slice,
  not the original array. That made my whole algorithm pretty pointless, in my mind. So I redesigned
  it to keep count of how many items before and after the current slice I had chopped off. And after
  many tweaks, that worked out.&lt;/p&gt;
</description>
        <pubDate>Sun, 27 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/27/binary-search.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/27/binary-search.html</guid>
        
        
      </item>
    
      <item>
        <title>Solving algorithms in JavaScript</title>
        <description>&lt;p&gt;Working through another set of small algorithmic challenges in order to bootstrap my JavaScript
  literacy! Today&#39;s problems include a pretty long solution to finding the mode in a given array,
  and the Look-Say sequence.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Mode.&lt;/b&gt; This problem gave me, well, problems. I used a JavaScript object like a hash to
  store values, but getting them back was messy as I&#39;m still unused to the syntax. In the end
  it was a long, drawn-out affair in three parts: generating a hash of the given numbers with their
  respective counts, determining the element with the highest count, and generating a new array
  containing the numbers whose counts were equal to the highest count.&lt;/p&gt;
  &lt;script src=&quot;https://gist.github.com/mindplace/b30f04954bd02bbd9ee6.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;&lt;b&gt;Look-Say Sequence.&lt;/b&gt; The idea for this one is for the program to look at a given number,
  extract it from the series, and record how many times it is repeated. So the number 1 returns
  11, because there was one 1 in the original number; the number 338862222 returns two 3s, two 8s,
  one 6, and four 2s, or 23281642.&lt;/p&gt;
  &lt;script src=&quot;https://gist.github.com/mindplace/3877aa922f0c537b5c3e.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Doing these kinds of algorithms all week has really helped me to get comfortable with JavaScript,
  I think. It&#39;s how I initially learned Ruby: first learn enough syntax to solve algorithms, then
  solve a whole bunch of them, then read textbooks to understand what is happening and what else
  I should think about to start building on top of the small but stable amount of knowledge that I
  have. I read somewhere about a dev who has a series of go-to challenges for solving when learning
  new languages, and although I originally thought that something like that wouldn&#39;t be enough, now
  it feels a bit different.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/25/solving-algorithms-in-javascript.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/25/solving-algorithms-in-javascript.html</guid>
        
        
      </item>
    
      <item>
        <title>Fibonacci algorithms in JavaScript and Ruby</title>
        <description>&lt;p&gt; Working with the Fibonacci sequence is really enjoyable as it is
  not bad to do either recursively or iteratively. And having to do it in JS was not painful. Here&#39;s
  one in JavaScript that generates Fibonacci numbers while the length of the sequence array does not equal the
  given required length:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/deb13ac6c015c8b3a4e1.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;And a similarly formed algorithm for determining if a given number is a Fibonacci number:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/918c6e3d87a28c484da4.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Here&#39;s the same solution in Ruby:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/57fb6100245cfbdfd979.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Those are all iterative solutions. I think recursive solutions are also lovely!&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/b7711feface611ad7082.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Except that my solution is, if anything, a line or two longer than the iterative one. So this
  wouldn&#39;t be even a conceptually better or neater solution and since it takes more memory,
  it&#39;ll remain just an exercise.&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/25/fibonacci-algorithms-in-javascript-and-ruby.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/25/fibonacci-algorithms-in-javascript-and-ruby.html</guid>
        
        
      </item>
    
  </channel>
</rss>
