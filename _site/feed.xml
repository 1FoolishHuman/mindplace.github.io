<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esther Leytush</title>
    <description></description>
    <link>http://estherleytush.com/</link>
    <atom:link href="http://estherleytush.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 25 Nov 2016 23:53:15 -0500</pubDate>
    <lastBuildDate>Fri, 25 Nov 2016 23:53:15 -0500</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>Five offers in four months</title>
        <description>&lt;p&gt;As of today, I’ve accepted an offer to start as a web developer with &lt;a href=&quot;https://www.thebacon.com/home&quot;&gt;The Bacon&lt;/a&gt;! I couldn’t be more excited to start contributing to this company’s codebase. But as I wrap up my projects to get ready to dive into this one, I want to share how I was able to get 5 offers in the 4 months since finishing &lt;a href=&quot;https://devbootcamp.com/&quot;&gt;Dev Bootcamp&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;offer-1-software-development-intern-at-marrymapp&quot;&gt;Offer 1: Software Development Intern at MarryMapp&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Circumstances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right after finishing DBC, I started sending out applications by the bushelful. One of the first places I looked for opportunities was through DBC’s online network of partner companies: companies DBC has approached regarding connecting graduates to work there. Many companies were listed for NYC; I sent out emails to nearly all of them. Within a few days, one company, &lt;a href=&quot;http://marrymapp.com/&quot;&gt;MarryMapp&lt;/a&gt;, responded.&lt;/p&gt;

&lt;p&gt;MarryMapp was a very young startup that hadn’t actually raised funding yet or launched its initial product, although they had built and deployed a beta product which was already being test-driven by around 200 users. They had a CEO and CTO with spectacular credentials, and both were developers with great degrees and successful years under their belt. But, because they had virtually no capital, they were seeking an unpaid intern to help build out their codebase. The CTO was not full-time in the role because of the lack of capital, and the CEO, while an excellent developer herself, needed to focus all her efforts on the huge amount of everything-else work that comprised their product and business, and they wanted someone who would work hard to help fix bugs and add features, but who they could also afford. The initial discussion I had with them clearly laid out that this was going to be a remote, part-time role which was going to be in all likelihood unpaid, because if there was any payment at the end of the 2 month contract it would be based on the company’s valuation, which would be $0 if they hadn’t raised capital by then.&lt;/p&gt;

&lt;p&gt;But that was fine. I was happy to continue that discussion anyway, and let them decide whether they wanted &lt;em&gt;me&lt;/em&gt; before I decided whether I wanted &lt;em&gt;them&lt;/em&gt;. There was a lot to love: a remote role would let me continue job-hunting comfortably, a chance to work with two incredible developers with a lot of knowledge, a chance to learn things I had never seen before (Angular, Node, Docker, Sass, ES6, Coffeescript, Wordpress, vim…so many things!). Plus, the best green-flag was the interview itself, where the CTO asked me to build a recursive algorithm to return a count of how many times a word appeared on a grid. When I balked at doing something that had taken me over a day to do during bootcamp, he urged me on and supported me, all the way through to the end, and I was thrilled that he showed that much faith in my abilities.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I did to secure this offer, and what happened after that&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I stayed very positive throughout the process. I made sure to get a good sense of their business by looking up what I could find about it online, looking up both the CEO and CTO to get a sense of what sort of people they were like and what I could learn from them. I stayed open and willing to the structure and process that they laid out before me. Finally, I worked hard to get my algorithm skills up to scratch before the interview.&lt;/p&gt;

&lt;p&gt;1.5 weeks after graduating bootcamp, they made me an offer to come on, and I signed on for a 2 month contract. I learned SO MUCH! It was an incredibly difficult experience, but so worth it. Plus, halfway through the contract, my CEO changed her mind about my status, and decided that she would be paying me–yes, paying!–as an independent contractor instead of an intern. I definitely loved being able to put “Software development contractor” on my LinkedIn…almost as much as getting a check at the end.&lt;/p&gt;

&lt;h3 id=&quot;offer-2-mentor-at-dev-bootcamp&quot;&gt;Offer 2: Mentor at Dev Bootcamp&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Circumstances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Throughout the time I spent in the program at DBC, I spent a lot of time helping out my peers. I did this because it hurts to see other people struggling, but also because it was a way that helped me personally to solidify my grasp of concepts and syntax. During Phase 0, I ran a study group and dedicated between 5 and 20 hours a week to being on Google Hangouts with the group’s members. I worked hard to grasp every concept put before me as well as things I found on my own, not satisfied with anything and wanting always to get better and do more. Once I got on campus, I continued to try and help my peers, sometimes by signing up to help newer cohorts, sometimes by holding informal tiny breakout sessions, and sometimes just by working hard to be a good and hands-off pair.&lt;/p&gt;

&lt;p&gt;So when I was invited along with several others from my cohort after graduation to interview for the Mentor positions, I already had something to point at to show I was both eager and capable of doing this work. (Plus, having had all that practice was a huge help!) The start of this role would coincide nicely with the end-date for my role with MarryMapp, and it would also be a part-time job that would leave me free to continue applying for full-time roles.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I did to secure this offer, and what happened after that&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I did my best to remember my ‘training’: letting the ‘student’ guide the experience, suggesting ideas and asking questions to get a sense of the ‘student’s’ knowledge on topics, and more. I continued the trend from MarryMapp of staying very positive throughout the experience, and working hard to be prepared, eager, and knowlegeable.&lt;/p&gt;

&lt;p&gt;Within a few days, DBC made me an offer to start as a Mentor, and I signed on right away. I continue to work as a Mentor now–nearly 2 months into the experience at this point–and have been thrilled to be a part of the DBC staff. I love working with students and having the skills I need to help alleviate their struggles in a way that I just wasn’t prepared to do while I was myself a bootcamper.&lt;/p&gt;

&lt;h3 id=&quot;offer-3-advisor-at-codecademy&quot;&gt;Offer 3: Advisor at Codecademy&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Circumstances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While I worked these part-time jobs, I continued to apply like crazy to many different jobs. One of these jobs I applied to was to be a Mentor at &lt;a href=&quot;https://www.codecademy.com/learn&quot;&gt;Codecademy&lt;/a&gt;. In order to apply, I reached out to several members of the staff at Codecademy via LinkedIn as well as completing their application. That was why they got back to me and followed up with my application–letting me know that while I wasn’t a fit for the Mentor role, I would definitely be a fit for the Advisor role, for which I promptly applied.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I did to secure this offer, and what happened after that&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;They quickly got me through the interview portion. During the interviews, I made a point of showcasing my tutoring and mentoring experience: not only was I working at Dev Bootcamp, but I had also been volunteering to teach newbie groups during &lt;a href=&quot;https://www.womenwhocode.com/&quot;&gt;Women Who Code&lt;/a&gt; &lt;a href=&quot;http://www.meetup.com/WomenWhoCodeNYC/events/232129663/&quot;&gt;Algorithms nights&lt;/a&gt;, I had built a passion project for helping newbies get access to materials to become better web developers (check it out here: &lt;a href=&quot;http://stackforyourself.com/&quot;&gt;stackforyourself.com&lt;/a&gt;), I had been going to technical conferences and &lt;a href=&quot;https://twitter.com/mindpl_ace/status/786253634786893824&quot;&gt;speaking about acceptance for bootcamp graduates&lt;/a&gt;… and more. Suffice to say, it was great to be able to talk about that. They made me an offer about a week later, which I happily accepted as a second part-time job alongside working at Dev Bootcamp.&lt;/p&gt;

&lt;h3 id=&quot;offer-4-web-development-apprentice-at-groundwork&quot;&gt;Offer 4: Web Development Apprentice at Groundwork&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Circumstances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Remember I mentioned I had been giving talks? Since finishing bootcamp, I have given talks, lessons, and tutorials over 12 times in front of groups! I absolutely recommend it as a way to build community and your professional network, build your credibility, expose your knowledge and ignorance alike, and be accountable to be knowledgeable on your topic for your event. One such event was the &lt;a href=&quot;http://www.meetup.com/NYC-rb/&quot;&gt;NYC.rb&lt;/a&gt; meetup, where I gave a talk &lt;a href=&quot;http://www.meetup.com/NYC-rb/events/231306324/&quot;&gt;“Avoiding N+1 Errors in Rails”&lt;/a&gt;. It was a concept I needed to actually learn before I presented it! And as it happened, at the event there were some people who were interested in hiring junior developers: namely, &lt;a href=&quot;http://www.buildgroundwork.com/#main&quot;&gt;Groundwork&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Groundwork is a software consultancy that primarily builds several products for a financial company that hired them on. Their company is premised on the concept of mentorship and pair-programming, and it immediately caught my interest when their CEO/CTO came up to present after my talk. I found him extremely knowledgable and, staying after the event to speak with him and one of his developers, learned a lot from our conversation that came out of my talk. I reached out to them the next day to follow up right after completing their application on their site, and right away they asked me to come in the following week for a Pair Day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I did to secure the offer, and what happened after that&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;At that point, I had already gotten an offer from The Bacon (more on that below!) and so I made sure to be very clear on that, in the interest of mutual transparency and respect. Disclosing that I already had an offer I think made me a more exciting prospect in their eyes. When I came in for the Pair Day, I continued to do what I had already done: exercised my social skills by being pleasant and open, allowed my curiosity and willingness to engage run wild, and prepared as much as possible. I had a great day with them and they made me an offer the next morning!&lt;/p&gt;

&lt;h3 id=&quot;offer-5-web-developer-at-the-bacon&quot;&gt;Offer 5: Web Developer at The Bacon&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Circumstances&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;During my frantic job search, I utilized as many sources for jobs as I could find. One awesome resource turned out to be the &lt;a href=&quot;https://www.womenwhocode.com/jobs&quot;&gt;Women Who Code job board&lt;/a&gt;, where I found a job listing for &lt;a href=&quot;https://www.thebacon.com/home&quot;&gt;The Bacon&lt;/a&gt;. I applied through the site, and the CEO reached out to follow up. After a very positive phone conversation, she set me up to speak with her developer–like MarryMapp, this is a small start-up with a need to bring on a remote, slightly-more-than-part-time engineer to help fix bugs and add features to their application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What I did to secure the offer, and what happened after that&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I made sure to ask plenty of questions to get knowledgeable on their tech stack and then brushed up on my Rails models, associations, and controllers. And a good thing too, since my entire technical interview was me and the developer building out several models for an example application.&lt;/p&gt;

&lt;p&gt;Within 2 weeks, they made me an awesome offer: a 30hr/week commitment to help build out their codebase in a completely remote environment. Perfect–I would get the chance to keep my other commitments! I spent some time calculating how much free time I would have left (answer: very little) and talking to my family. I got the offer while in the middle of the interview process with several other companies, but I knew that the circumstances of the job, high level of responsibility, and much I just liked the team made this a clear top choice. But Groundwork made me a more lucrative offer. Feeling torn, I asked The Bacon whether they would be willing to match it: and they did! Within an hour of that news, I accepted the offer and am due to start next week!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;takeaways&quot;&gt;Takeaways&lt;/h3&gt;
&lt;p&gt;Staying positive, engaging eagerly, and continuing to work on my knowledge by building lots of cool projects were definitely the main reasons I was able to secure these positions. I tried to create value and positivity with each interaction, stay flexible, and go boldly for what I wanted.&lt;/p&gt;

&lt;p&gt;As for keeping myself going during the times when it felt especially difficult to imagine myself as gainfully employed to write wonderful code, I can only say that engaging with the community was an amazing antidote that kept on giving. Asking for volunteering opportunities instead of asking for referrals allowed me to get to know and help people. Putting myself out there by applying to give talks on topics I wasn’t qualified to give talks on made me work harder, feel more confident, and succeed better (and it always worked out in the end). Continuing to push code and wanting to see those green boxes on my Github made me accountable.&lt;/p&gt;

&lt;p&gt;I can’t wait to start my second development job after bootcamp 4 months after graduating. And I hope this helps others who are also getting into the job market having finished their own programs, on the doorstep of their careers as web developers.&lt;/p&gt;
</description>
        <pubDate>Thu, 20 Oct 2016 00:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/10/20/five-offers-in-four-months.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/10/20/five-offers-in-four-months.html</guid>
        
        
      </item>
    
      <item>
        <title>Avoiding N+1 Queries</title>
        <description>&lt;p&gt;N+1 errors are considered one of the most common reasons for slow Rails apps. I gave a talk on this issue at &lt;a href=&quot;http://railscamp.io/&quot;&gt;Rails Camp&lt;/a&gt;, one of the &lt;a href=&quot;http://opencamps.org/&quot;&gt;Open Camps at the UN&lt;/a&gt; events happening in NYC during July 2016. Check out the &lt;a href=&quot;http://www.slideshare.net/EstherLeytush/avoiding-n1-errors-in-rails-apps&quot;&gt;slides&lt;/a&gt; on Slideshare, and the &lt;a href=&quot;https://github.com/mindplace/n_plus_one_blog&quot;&gt;repository&lt;/a&gt; with the sample app on Github. The code is in 2 branches: the master branch is the app without being optimized to avoid N+1 queries, while the &lt;code class=&quot;highlighter-rouge&quot;&gt;eager-loading&lt;/code&gt; branch is optimized and meant as a contrast.&lt;/p&gt;

&lt;p&gt;But things are more fun when they’re written out, with lovely code samples! So without further ado…&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;n1-errors-in-rails-apps&quot;&gt;N+1 errors in Rails apps&lt;/h2&gt;

&lt;h3 id=&quot;what-they-are&quot;&gt;What they are&lt;/h3&gt;

&lt;p&gt;N+1 errors are when a parent record needs to load information about some child records and queries the database once per child record. So say you had an index page for posts: you’d query the database from your controller to load those posts via &lt;code class=&quot;highlighter-rouge&quot;&gt;@posts = Post.all&lt;/code&gt; or something of the sort, and say you’d then have 20 posts for the page in total. But then if you needed to render info of an association attached to a post record–such as that post’s number of comments–you’d be querying for those comments once per post. So, 1 query to get 20 posts, and then 20 queries to get the total comments per post, for a total of 21 queries: hence the name N+1.&lt;/p&gt;

&lt;p&gt;Here’s an example in action:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# From the PostController:&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;created_at: :desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- From the post index page view: --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% @posts.each do |post| %&amp;gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;col-md-8 col-md-offset-2 panel panel-default panel-body&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= post.body %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;date&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;i&amp;gt;&lt;/span&gt;posted by &lt;span class=&quot;nt&quot;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= link_to post.user.username, user_path(post.user) %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/b&amp;gt;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= time_ago_in_words(post.created_at) %&amp;gt; ago&lt;span class=&quot;nt&quot;&gt;&amp;lt;/i&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice that the view is making a call to the &lt;code class=&quot;highlighter-rouge&quot;&gt;post.user&lt;/code&gt; association. This data isn’t held on the post object itself, which is why it needs to query the database for it. Here’s the resulting log when this page is requested:&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Started&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;/post&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2016&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;07&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;35&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0400&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Processing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PostController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HTML&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;ORDER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;posts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;created_at&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;Load&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Rendered&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;within&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;layouts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;47&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;CACHE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt;  &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;&quot;users&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;LIMIT&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Completed&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OK&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Views&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;59&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is considered an error because it’s inefficient to make that many requests to a server when they could be couched as one or two requests in total. Because the above result is just awful when considering that that’s just for 10 posts in total. If you had 100, 1000, or more items to get info about, your app would  be in trouble. The page load times would certainly suffer.&lt;/p&gt;

&lt;h3 id=&quot;how-to-fix-them&quot;&gt;How to fix them&lt;/h3&gt;

&lt;p&gt;Eager loading is one of the solutions for this problem. That’s something that Rails now comes built-in with, and there’s three main methods related to preloading the associations you’ll need: &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;includes&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;eager_load&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;preload
Preload is default case for #includes method – it creates two separate queries, one for main query and other for associated data. ...

includes
Instead of #preload, #includes chooses to make one query based on situation – if you add associated #where clause. This will make more complex SQL query. ...

eager_load
This method is the same as combination of #includes and #references as it makes one query with LEFT OUTER JOIN.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;From &lt;a href=&quot;http://blog.diatomenterprises.com/remove-n1-queries-in-your-ruby-on-rails-app/&quot;&gt;“Remove N+1 queries in your Ruby on Rails app”&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Here’s preloading the user association for posts from our previous example, using &lt;code class=&quot;highlighter-rouge&quot;&gt;preload&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# From the PostController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@posts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;preload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;created_at: :desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the resulting queries:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-SQL&quot;&gt;Started GET &quot;/post&quot; for ::1 at 2016-07-19 16:55:38 -0400
Processing by PostController#index as HTML
  Post Load (0.4ms)  SELECT  &quot;posts&quot;.* FROM &quot;posts&quot;  ORDER BY &quot;posts&quot;.&quot;created_at&quot; DESC LIMIT 10
  User Load (12.4ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; IN (9, 12, 2, 8, 5, 6)
  Rendered post/index.html.erb within layouts/application (33.0ms)
  User Load (0.2ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = $1 LIMIT 1  [[&quot;id&quot;, 12]]
  CACHE (0.0ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = $1 LIMIT 1  [[&quot;id&quot;, 12]]
  CACHE (0.0ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = $1 LIMIT 1  [[&quot;id&quot;, 12]]
Completed 200 OK in 62ms (Views: 44.2ms | ActiveRecord: 15.6ms)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So much better!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;resources-and-references&quot;&gt;Resources and references&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.slideshare.net/EstherLeytush/avoiding-n1-errors-in-rails-apps&quot;&gt;slides&lt;/a&gt; from the talk&lt;br /&gt;
The &lt;a href=&quot;https://github.com/mindplace/n_plus_one_blog&quot;&gt;sample app&lt;/a&gt; built to support the talk&lt;br /&gt;
&lt;a href=&quot;https://github.com/flyerhzm/bullet&quot;&gt;Bullet gem&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.sitepoint.com/silver-bullet-n1-problem/&quot;&gt;“The (Silver) Bullet for the N+1 Problem”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.diatomenterprises.com/remove-n1-queries-in-your-ruby-on-rails-app/&quot;&gt;“Remove N+1 queries in your Ruby on Rails app”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.toptal.com/ruby-on-rails/top-10-mistakes-that-rails-programmers-make&quot;&gt;“Buggy Rails Code: The 10 Most Common Mistakes That Rails Developers Make”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://aspiringwebdev.com/avoid-the-n1-problem-in-rails-by-harnessing-your-database/&quot;&gt;“Avoid the N+1 problem in in Rails by harnessing your database”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.arkency.com/2013/12/rails4-preloading/&quot;&gt;“3 ways to do eager loading (preloading) in Rails 3 &amp;amp; 4”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://blog.bigbinary.com/2013/07/01/preload-vs-eager-load-vs-joins-vs-includes.html&quot;&gt;“Preload, Eagerload, Includes and Joins”&lt;/a&gt;
&lt;a href=&quot;http://www.justinweiss.com/articles/how-to-preload-rails-scopes/&quot;&gt;“How to preload Rails scopes”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://railscasts.com/episodes/22-eager-loading&quot;&gt;“RailsCasts #22, Eager Loading”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;“ActiveRecord, Eager Loading Associations”&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://rossta.net/blog/n+1-is-a-rails-feature.html&quot;&gt;“N+1 is a Rails Feature”&lt;/a&gt;
&lt;a href=&quot;https://www.toptal.com/ruby-on-rails#nPlus1Queries&quot;&gt;“The Vital Guide to Ruby on Rails Interviewing”&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 00:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/07/10/avoiding-n-plus-one-queries.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/07/10/avoiding-n-plus-one-queries.html</guid>
        
        
      </item>
    
      <item>
        <title>Bitly clone API in Rails</title>
        <description>&lt;p&gt;I built a nifty little &lt;a href=&quot;bitly.com&quot;&gt;Bitly&lt;/a&gt; clone in Rails to practice building an API backend. (The repo is &lt;a href=&quot;https://github.com/mindplace/bitly_clone&quot;&gt;here&lt;/a&gt;). It was similar to what my team built for &lt;a href=&quot;https://github.com/mindplace/Curator&quot;&gt;Curator&lt;/a&gt; and it was nice to find reaffirmation in how straightforward it is to create this kind of web structure in Rails. Let’s jump into the code.&lt;/p&gt;

&lt;p&gt;The program flow is straightfoward. There’s only three routes:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# config/routes&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;draw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/shorten&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url#create&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;ss&quot;&gt;as: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;create_short_link&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/data&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url#index&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;ss&quot;&gt;as: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;get_click_data&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/:short&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;ss&quot;&gt;to: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url#show&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;ss&quot;&gt;as: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;redirect_link&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start with the first route. In order to use this API, the user needs to make a request with params. Here’s how my runner/test code looks for that:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# runner file&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorten_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/shorten&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;query&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;encode_www_form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So this sample link&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://coderwall.com/p/uh8kiw/pass-arrays-objects-via-querystring-the-rack-rails-way
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;looks like this when sent to my API:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http://localhost:3000/shorten?url=https%3A%2F%2Fcoderwall.com%2Fp%2Fuh8kiw%2Fpass-arrays-objects-via-querystring-the-rack-rails-way
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When the request hits the &lt;code class=&quot;highlighter-rouge&quot;&gt;/shorten&lt;/code&gt; route, it triggers the &lt;code class=&quot;highlighter-rouge&quot;&gt;create&lt;/code&gt; action:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# UrlController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;json: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shorten_multiple_links&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The method &lt;code class=&quot;highlighter-rouge&quot;&gt;shorten_multiple_links&lt;/code&gt; is found in the module &lt;code class=&quot;highlighter-rouge&quot;&gt;URLActions&lt;/code&gt;. This method first looks to see whether the request params contain only one link, or an array of links:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# URLActions module&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorten_multiple_links&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;urls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;urls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;urls&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:urls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shorten_single_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shorten_single_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This helps it construct a hash of multiple links or just a single link. Let’s look at what happens when passed that sample link. The method &lt;code class=&quot;highlighter-rouge&quot;&gt;shorten_single_link&lt;/code&gt; gets called with the single link as the param:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# URLActions module&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;shorten_single_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;body: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;errors&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;errors_as_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It tries to find that link in my database. Let’s assume it’s not there–that means it needs to create a new entry, which it does by generating a new URL object. The model generates a short link using the callback &lt;code class=&quot;highlighter-rouge&quot;&gt;before_create :generate_short, if: :no_short_exists?&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# URL model&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;no_short_exists?&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_short&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exists?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;short: &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SecureRandom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then, assuming all went well and it was a legitimate initial link, the &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; value is returned back to the client. Here’s what that looks like:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://coderwall.com/p/uh8kiw/pass-arrays-objects-via-querystring-the-rack-rails-way&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;short&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000/b2f6a8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Straightforward! Additionally, when using that short link, the controller simply routes the request that way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# UrlController&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;show&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;short: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;click_count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;body&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@short&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;short&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/not_found&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Notice the &lt;code class=&quot;highlighter-rouge&quot;&gt;click_count&lt;/code&gt; goes up by 1. We can query for the &lt;code class=&quot;highlighter-rouge&quot;&gt;click_count&lt;/code&gt; for that link in a nice way:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://coderwall.com/p/uh8kiw/pass-arrays-objects-via-querystring-the-rack-rails-waye&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
 &lt;span class=&quot;s2&quot;&gt;&quot;click_count&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Meaning, that url’s short link has been used 11 times. Nifty!&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Jul 2016 00:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/07/07/bitly-clone.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/07/07/bitly-clone.html</guid>
        
        
      </item>
    
      <item>
        <title>AngelHack Brooklyn 2016: Using HPE&#39;s Haven OnDemand API to build Curator</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt; won at &lt;a href=&quot;http://angelhack.com/portfolio-item/brooklyn-usa-may-7-8-2016/&quot;&gt;AngelHack Brooklyn 2016&lt;/a&gt; for best use of &lt;a href=&quot;https://dev.havenondemand.com/apis&quot;&gt;HPE Haven OnDemand&lt;/a&gt;’s API!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/curator.png&quot; alt=&quot;curator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We built &lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt; as a Rails app. It uses the Reddit API and the NYTimes API to pull text data when queried with a search term, then makes a call to an &lt;a href=&quot;https://dev.havenondemand.com/apis/extractconcepts#overview&quot;&gt;HPE’s concept-extraction API&lt;/a&gt; that parses the text data. These concepts are returned to the frontend, where the jQuery library &lt;a href=&quot;https://github.com/lucaong/jQCloud&quot;&gt;jQCloud&lt;/a&gt; uses it to create beautiful word clouds displaying how the media vs individuals feel about the given search query. Here’s some sample results when queried with ‘Clinton’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/curator-clinton.png&quot; alt=&quot;clinton-query-curator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at how Curator works. Most of the work happens in our backend controller when a user triggers a search:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/afb75737a756eb5892e900a3fc189fd8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s look at the &lt;code&gt;call_to_Reddit&lt;/code&gt; more closely, one of our helper methods. It takes the search term and makes two searches with Reddit–one to /r/worldnews and one to /r/news–to come back with one post from each subreddit. We wanted to tackle both of the main news outlets on Reddit, and we needed to use Reddit’s search in order to limit our data to actual relevant posts that were more likely to have a high volume of comments.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/0d1e29b8fd77f56e62b6ccc83af611b6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;For each of these two posts, we parsed them to get just their URLs, then triggered a call to &lt;code&gt;parse_posts&lt;/code&gt; to grab their content.&lt;/p&gt;

&lt;p&gt;This is where the meat of the work comes in. Using Reddit again, we used the two links we got from &lt;code&gt;call_to_Reddit&lt;/code&gt; to get all the content for those posts. The data comes in as a giant hash, which we needed to parse for just its text elements. The post URLs and titles are preserved in one part of our hash, while the other part contains just the comment text data.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/67e02efee51ec7529449f9be620fdf57.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Getting the comments was tricky, in part because it was hard to understand which parts of the incoming JSON data were actually relevant, and in part because it required a recursive approach in order to preserve comments made on comments etc. Here’s what we ended up doing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/31948caecce83b612739baba2786e139.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I later extracted the comment grabbing portion of the work that we did and turned that into a Ruby gem called &lt;a href=&quot;https://github.com/mindplace/reddit_comments_gem&quot;&gt;reddit_comments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we had our text data, it was time to make the call to &lt;a href=&quot;https://dev.havenondemand.com/apis/extractconcepts#overview&quot;&gt;HPE’s concept-extraction API&lt;/a&gt;. In order to do this, we decided to use the official &lt;a href=&quot;https://github.com/HPE-Haven-OnDemand/havenondemand-ruby&quot;&gt;havenondemand&lt;/a&gt; Ruby gem. This greatly simplified what we needed to do, making it possible to simply initialize a client and send a request. Here’s our code for that:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/a9640d6406cf3986f8cc59e18564f0aa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;While getting the data from Reddit and NYTimes was costly in terms of how long it took, HPE had a very fast turnaround.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started GET &quot;/search?utf8=%E2%9C%93&amp;amp;term=Clinton&quot; for ::1 at 2016-06-29 17:38:43 -0400
Processing by DashboardController#search as */*
  Parameters: {&quot;utf8&quot;=&amp;gt;&quot;✓&quot;, &quot;term&quot;=&amp;gt;&quot;Clinton&quot;}
Completed 200 OK in 5914ms (Views: 0.1ms | ActiveRecord: 0.0ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that was it! After that we delivered the data in JSON format to our frontend and used the &lt;a href=&quot;https://github.com/lucaong/jQCloud&quot;&gt;jQCloud&lt;/a&gt; library to create word clouds with the concepts that the HPE API extracted for us.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’m &lt;a href=&quot;https://github.com/mindplace&quot;&gt;Esther Leytush&lt;/a&gt;, and my team was &lt;a href=&quot;https://github.com/JoshJHWu&quot;&gt;Josh Wu&lt;/a&gt;, &lt;a href=&quot;https://github.com/seodo&quot;&gt;John Seo&lt;/a&gt;, &lt;a href=&quot;https://github.com/RebeccaKleinberg&quot;&gt;Rebecca Kleinberg&lt;/a&gt;, and &lt;a href=&quot;https://github.com/sonomar&quot;&gt;Lawson Marlowe&lt;/a&gt;. We’re all recent &lt;a href=&quot;http://devbootcamp.com/&quot;&gt;Dev Bootcamp&lt;/a&gt; graduates and we had a huge blast at AngelHack.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/06/28/angelhack-hpe-api.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/06/28/angelhack-hpe-api.html</guid>
        
        
      </item>
    
      <item>
        <title>Deploying Sinatra apps to Heroku</title>
        <description>&lt;p&gt;I’ve deployed various Rails apps to Heroku, but never tried deploying a Sinatra app. At first glance, the process should be similar: add some gems, create new Heroku app via command line, push up, and run database setup commands. Let’s see if that prediction holds true.&lt;/p&gt;

&lt;p&gt;I’ve got a &lt;a href=&quot;https://github.com/mindplace/throne-overthrow&quot;&gt;StackOverflow clone&lt;/a&gt; that I built with a team for Dev Bootcamp that we called ThroneOverthrow (the go-to forum to ask questions about Game of Thrones!) ready to deploy. It has a lot of problems, primarily the way it looks and feels, but it’s a toy app and ready enough.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku create throne-overthrow
Creating ⬢ throne-overthrow... done
https://throne-overthrow.herokuapp.com/ | https://git.heroku.com/throne-overthrow.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good! Now to deploy…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push heroku master
... [lots of good-looking things happen on the screen...]
Verifying deploy... done.
To https://git.heroku.com/throne-overthrow.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sweet! Now, migrations and seeding…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku run rake db:migrate
Running rake db:migrate on ⬢ throne-overthrow... up, run.1706

$ heroku run rake db:seed
Running rake db:seed on ⬢ throne-overthrow... up, run.8956
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looks great. Opening to make sure it’s up…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/throne-overthrow.png&quot; alt=&quot;throne-overthrow.png&quot; /&gt;
&lt;i&gt;Jon Snow says, ‘Wat are dis?’&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;It’s all there! Awesome and painless.&lt;/p&gt;

&lt;p&gt;The site is up at &lt;a href=&quot;https://throne-overthrow.herokuapp.com&quot;&gt;throne-overthrow.herokuapp.com&lt;/a&gt;. Last step is making sure the site doesn’t go to sleep when people want to check it out, which means using &lt;a href=&quot;http://kaffeine.herokuapp.com/&quot;&gt;Kaffeine&lt;/a&gt;. Aaaand…done!&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/06/26/deploying-sinatra-apps-to-heroku.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/06/26/deploying-sinatra-apps-to-heroku.html</guid>
        
        
      </item>
    
      <item>
        <title>Publishing comments with Disqus on a Jekyll site</title>
        <description>&lt;p&gt;Adding comments to this blog has definitely been on my to-do list for a while. It’s one of the only ways that readers and users get to interact with the content I put here. I decided to use &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; comments instead of building my own solution, moreso because they support &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; sites (which is what this site is–I believe in appropriate sized containers!).&lt;/p&gt;

&lt;p&gt;It should be simple, as their &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&quot;&gt;documentation&lt;/a&gt; is short and straightforward. First, I add a script tag to the basic layout that wraps my posts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script id=&quot;dsq-count-scr&quot; src=&quot;//estherleytush.disqus.com/count.js&quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then for the pages I want to enable Disqus on, I add &lt;code class=&quot;highlighter-rouge&quot;&gt;comments: true&lt;/code&gt; to the YAML front matter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;published: true
comments: true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, in my posts layout, I add this to the bottom of the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;disqus_thread&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    (function() {
        var d = document, s = d.createElement(&#39;script&#39;);

        s.src = &#39;//estherleytush.disqus.com/embed.js&#39;;

        s.setAttribute(&#39;data-timestamp&#39;, +new Date());
        (d.head || d.body).appendChild(s);
    })();
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&quot;https://disqus.com/?ref_noscript&quot; rel=&quot;nofollow&quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Checked it out on my site and it’s there and looking super spiffy! There it is below :)&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/06/24/adding-comments-to-jekyll-site.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/06/24/adding-comments-to-jekyll-site.html</guid>
        
        
      </item>
    
      <item>
        <title>reddit_comments: my first gem</title>
        <description>&lt;p&gt;I’ve wanted to build a gem since I first heard about them, but didn’t find myself building any particular features or products that could be modularized and shared with others in this way. But this weekend, at AngelHack Brooklyn 2016, my team and I built &lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Curator uses the Reddit API and the NYTimes API to pull text data when queried with a search term. It uses this data to make a call to the HPE Haven OnDemand API, which parses and extracts concepts. These concepts are returned to the frontend, where the jQuery library jQCloud uses it to create beautiful word clouds displaying how the media vs individuals feel about the given search query.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the major problems we needed to solve was grabbing text from a Reddit post page with comments. Reddit’s commenting system is such that a user can make a comment on another comment, as well as on a post. So after battling http calls issues and figuring all that out, we were still left with a huge hash of comments with nested comments with nested comments.&lt;/p&gt;

&lt;p&gt;If you know me at all, you know that my ears perk up at these kinds of problems right away, because I am a bit of a fan of recursion. So I ended up spending a lot of time figuring out what data is given in this hash, and then designing a method to pull in those comments recursively:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recursive_comment_digging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;parent_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;parent_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recursive_comment_digging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Today I sat down and packaged up that functionality as a gem. It turned out to be a lot easier than I initially thought it would be. Essentially there were several parts to the job:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deciding on scope: I decided that I wanted my gem to take a URL and return the comments posted on that Reddit page as an array of hashes.&lt;/li&gt;
  &lt;li&gt;Understanding what goes into building a gem: I found &lt;a href=&quot;http://railscasts.com/episodes/245-new-gem-with-bundler&quot;&gt;RailsCast’s post&lt;/a&gt; on building a gem with Bundler to be really helpful, as well as the official &lt;a href=&quot;http://guides.rubygems.org/rubygems-basics/&quot;&gt;RubyGems&lt;/a&gt; documentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The biggest issue I faced was when I tried to push the gem to RubyGems.org. It turned out that because my terminal had been in the folder when I had built the gem initially to install and test locally, the compiled gem file ended up being inside the folders that contained the files to build it–but resolving this was as easy as deleting that file and building it outside of the folders entirely.&lt;/p&gt;

&lt;p&gt;Next step is refactoring and building some RSpec tests for this gem!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://estherleytush.com/2016/06/19/reddit-comments-my-first-gem.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/06/19/reddit-comments-my-first-gem.html</guid>
        
        
      </item>
    
      <item>
        <title>Bucket sort</title>
        <description>&lt;p&gt;I started off not really understanding how bucket sort works; the concept of partitioning
  items by placing them into different buckets made sense, but what is the way in which the
  program decides on bucket sizes? I couldn&#39;t understand the logic even when I looked at
  examples of others&#39; bucket sorts. So I decided to design my solution in a way that didn&#39;t
  pre-make buckets before partitioning. Instead, it sends items to their corresponding indexes&amp;mdash;so
  66 would be sent to &lt;code&gt;bucket[66]&lt;/code&gt;, etc.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/bed7e13afb85c22f321938a5ccd57967.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Does this still count as a bucket sort? Is this an example of another type of sorting
  algorithm? It makes sense and seems to be optimized for speed, as claiming new slots in
  an existing array should be faster than doing calculations to figure out where an item should go. Either way, it&#39;s simple and it works, so it&#39;s satisfying enough, even if it
  isn&#39;t an actual bucket sort.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://estherleytush.com/2016/04/05/bucket-sort.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/04/05/bucket-sort.html</guid>
        
        
      </item>
    
      <item>
        <title>JavaScript browser grocery list</title>
        <description>&lt;p&gt;My cohort is preparing for week 1 in Phase 1 as of next week, and it&#39;s all review this week.
  As part of that, I thought I would try branching out into using JavaScript in the browser. Here&#39;s
  a grocery list function that works, rather annoyingly, through pop-ups, alerting and prompting
  the user to the state of their grocery list.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/99027193d2cf15a319034d204c277133.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The more I work with JavaScript, the more irritating I find it. For example, when I tried running this
  script in the command line just to see if there were any syntax errors that I hadn&#39;t caught
  by eye, it refused to move past what I swear was a made-up error at line 2, which
  had not thrown an error previously, nor threw an error when I gave up and ran the code in
  the browser console directly. I keep having these struggles with JavaScript over what looks
  like absolutely nothing. I hope we come to terms with one another soon.&lt;/p&gt;

&lt;p&gt;That said, I was able to get a little more clarity in working with strings, objects, and
  loops in JavaScript, allowing for this second iteration to be a better laid out
  program.
&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://estherleytush.com/2016/04/04/javascript-browser-grocery-list.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/04/04/javascript-browser-grocery-list.html</guid>
        
        
      </item>
    
      <item>
        <title>Binary conversions</title>
        <description>&lt;p&gt;One of the first computing concepts I was introduced to when I started learning to program was
  the concept of binary numbers. I had known already that computers understood everything on a
  fundamendal level in terms of binary code, but I hadn&#39;t understood how standard numbers in base-10, for example,
  could be understood in base-2. Converting numbers to their representations in different bases was
  a bizarre concept to me until I was shown me how they are broken down: how 111 turned
  into 7, for example. Once I finally worked through it mentally, I sat down and wrote two
  scripts to translate a base-10 number
  into base-2, and vice versa, and then rewrote these programs in JavaScript. To start, here&#39;s the Ruby
  script that converts a base-2 number into a base-10 one:&lt;/p&gt;
  &lt;script src=&quot;https://gist.github.com/mindplace/85e7052a78b70878ec103be9b24b6e2b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Understanding that the binary number needed to be reversed before it could be translated was an
  important part of conceptualizing it: that a binary number like 001 needs to be seen as 100 in order
  to be passed as a number to the program, but that 100 must then be reversed in order to be translated. Here&#39;s the
  same script in JavaScript:
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/163fe26593fd000990dc95b860d02b31.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Conceptually, I&#39;ve been trying to stick to the same logic in Ruby as well as JavaScript; I&#39;m not sure if
  this really helps me branch out into the way JavaScript actually differs conceptually from Ruby, but it&#39;s
  certainly helped speed me up to solving algorithmic problems in JavaScript.&lt;/p&gt;
&lt;p&gt;So far the programs I wrote to convert a base-2 to base-10 numbers were short. By contrast,
  my solution for converting a base-10 to base-2 turned out to be much longer:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/6098697725c7c0dd6aed9bc615d37a56.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I couldn&#39;t think of how to slot in the appropriate 1&#39;s into their places without counting
  up in powers of 2, but that solution did work well. At some point I want to return to it and
  think about it again to see if I could solve it in a better way. Here&#39;s the same solution in
  JavaScript:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/740684d0745b8249bd4707d9064a26dd.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;That&#39;s all for today! Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://estherleytush.com/2016/04/03/binary-conversions.html</link>
        <guid isPermaLink="true">http://estherleytush.com/2016/04/03/binary-conversions.html</guid>
        
        
      </item>
    
  </channel>
</rss>
