<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Esther Leytush</title>
    <description></description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 Jun 2016 18:38:34 -0400</pubDate>
    <lastBuildDate>Wed, 29 Jun 2016 18:38:34 -0400</lastBuildDate>
    <generator>Jekyll v3.1.6</generator>
    
      <item>
        <title>AngelHack Brooklyn 2016: Using HPE&#39;s Haven OnDemand API to build Curator</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt; won at &lt;a href=&quot;http://angelhack.com/portfolio-item/brooklyn-usa-may-7-8-2016/&quot;&gt;AngelHack Brooklyn 2016&lt;/a&gt; for best use of &lt;a href=&quot;https://dev.havenondemand.com/apis&quot;&gt;HPE Haven OnDemand&lt;/a&gt;’s API!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/curator.png&quot; alt=&quot;curator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We built &lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt; as a Rails app. It uses the Reddit API and the NYTimes API to pull text data when queried with a search term, then makes a call to an &lt;a href=&quot;https://dev.havenondemand.com/apis/getcontent#overview&quot;&gt;HPE’s content-extraction API&lt;/a&gt; that parses the text data. These concepts are returned to the frontend, where the jQuery library &lt;a href=&quot;https://github.com/lucaong/jQCloud&quot;&gt;jQCloud&lt;/a&gt; uses it to create beautiful word clouds displaying how the media vs individuals feel about the given search query. Here’s some sample results when queried with ‘Clinton’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/curator-clinton.png&quot; alt=&quot;clinton-query-curator&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s take a look at how Curator works. Most of the work happens in our backend controller when a user triggers a search:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/afb75737a756eb5892e900a3fc189fd8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Let’s look at the &lt;code&gt;call_to_Reddit&lt;/code&gt; more closely, one of our helper methods. It takes the search term and makes two searches with Reddit–one to /r/worldnews and one to /r/news–to come back with one post from each subreddit. We wanted to tackle both of the main news outlets on Reddit, and we needed to use Reddit’s search in order to limit our data to actual relevant posts that were more likely to have a high volume of comments.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/0d1e29b8fd77f56e62b6ccc83af611b6.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;For each of these two posts, we parsed them to get just their URLs, then triggered a call to &lt;code&gt;parse_posts&lt;/code&gt; to grab their content.&lt;/p&gt;

&lt;p&gt;This is where the meat of the work comes in. Using Reddit again, we used the two links we got from &lt;code&gt;call_to_Reddit&lt;/code&gt; to get all the content for those posts. The data comes in as a giant hash, which we needed to parse for just its text elements. The post URLs and titles are preserved in one part of our hash, while the other part contains just the comment text data.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/67e02efee51ec7529449f9be620fdf57.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Getting the comments was tricky, in part because it was hard to understand which parts of the incoming JSON data were actually relevant, and in part because it required a recursive approach in order to preserve comments made on comments etc. Here’s what we ended up doing:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/31948caecce83b612739baba2786e139.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;I later extracted the comment grabbing portion of the work that we did and turned that into a Ruby gem called &lt;a href=&quot;https://github.com/mindplace/reddit_comments_gem&quot;&gt;reddit_comments&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once we had our text data, it was time to make the call to &lt;a href=&quot;https://dev.havenondemand.com/apis/getcontent#overview&quot;&gt;HPE’s content-extraction API&lt;/a&gt;. In order to do this, we decided to use the official &lt;a href=&quot;https://github.com/HPE-Haven-OnDemand/havenondemand-ruby&quot;&gt;havenondemand&lt;/a&gt; Ruby gem. This greatly simplified what we needed to do, making it possible to simply initialize a client and send a request. Here’s our code for that:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/mindplace/a9640d6406cf3986f8cc59e18564f0aa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;While getting the data from Reddit and NYTimes was costly in terms of how long it took, HPE had a very fast turnaround.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Started GET &quot;/search?utf8=%E2%9C%93&amp;amp;term=Clinton&quot; for ::1 at 2016-06-29 17:38:43 -0400
Processing by DashboardController#search as */*
  Parameters: {&quot;utf8&quot;=&amp;gt;&quot;✓&quot;, &quot;term&quot;=&amp;gt;&quot;Clinton&quot;}
Completed 200 OK in 5914ms (Views: 0.1ms | ActiveRecord: 0.0ms)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And that was it! After that we delivered the data in JSON format to our frontend and used the &lt;a href=&quot;https://github.com/lucaong/jQCloud&quot;&gt;jQCloud&lt;/a&gt; library to create word clouds with the concepts that the HPE API extracted for us.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’m &lt;a href=&quot;https://github.com/mindplace&quot;&gt;Esther Leytush&lt;/a&gt;, and my team was &lt;a href=&quot;https://github.com/JoshJHWu&quot;&gt;Josh Wu&lt;/a&gt;, &lt;a href=&quot;https://github.com/seodo&quot;&gt;John Seo&lt;/a&gt;, &lt;a href=&quot;https://github.com/RebeccaKleinberg&quot;&gt;Rebecca Kleinberg&lt;/a&gt;, and &lt;a href=&quot;https://github.com/sonomar&quot;&gt;Lawson Marlowe&lt;/a&gt;. We’re all recent &lt;a href=&quot;http://devbootcamp.com/&quot;&gt;Dev Bootcamp&lt;/a&gt; graduates and we had a huge blast at AngelHack.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2016/06/28/angelhack-hpe-api.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/28/angelhack-hpe-api.html</guid>
        
        
      </item>
    
      <item>
        <title>Deploying Sinatra apps to Heroku</title>
        <description>&lt;p&gt;I’ve deployed various Rails apps to Heroku, but never tried deploying a Sinatra app. At first glance, the process should be similar: add some gems, create new Heroku app via command line, push up, and run database setup commands. Let’s see if that prediction holds true.&lt;/p&gt;

&lt;p&gt;I’ve got a &lt;a href=&quot;https://github.com/mindplace/throne-overthrow&quot;&gt;StackOverflow clone&lt;/a&gt; that I built with a team for Dev Bootcamp that we called ThroneOverthrow (the go-to forum to ask questions about Game of Thrones!) ready to deploy. It has a lot of problems, primarily the way it looks and feels, but it’s a toy app and ready enough.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku create throne-overthrow
Creating ⬢ throne-overthrow... done
https://throne-overthrow.herokuapp.com/ | https://git.heroku.com/throne-overthrow.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So far so good! Now to deploy…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push heroku master
... [lots of good-looking things happen on the screen...]
Verifying deploy... done.
To https://git.heroku.com/throne-overthrow.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Sweet! Now, migrations and seeding…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku run rake db:migrate
Running rake db:migrate on ⬢ throne-overthrow... up, run.1706

$ heroku run rake db:seed
Running rake db:seed on ⬢ throne-overthrow... up, run.8956
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looks great. Opening to make sure it’s up…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ heroku open
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/blog/throne-overthrow.png&quot; alt=&quot;throne-overthrow.png&quot; /&gt;
&lt;i&gt;Jon Snow says, ‘Wat are dis?’&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;It’s all there! Awesome and painless.&lt;/p&gt;

&lt;p&gt;The site is up at &lt;a href=&quot;https://throne-overthrow.herokuapp.com&quot;&gt;throne-overthrow.herokuapp.com&lt;/a&gt;. Last step is making sure the site doesn’t go to sleep when people want to check it out, which means using &lt;a href=&quot;http://kaffeine.herokuapp.com/&quot;&gt;Kaffeine&lt;/a&gt;. Aaaand…done!&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jun 2016 00:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2016/06/26/deploying-sinatra-apps-to-heroku.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/26/deploying-sinatra-apps-to-heroku.html</guid>
        
        
      </item>
    
      <item>
        <title>Publishing comments with Disqus on a Jekyll site</title>
        <description>&lt;p&gt;Adding comments to this blog has definitely been on my to-do list for a while. It’s one of the only ways that readers and users get to interact with the content I put here. I decided to use &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; comments instead of building my own solution, moreso because they support &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; sites (which is what this site is–I believe in appropriate sized containers!).&lt;/p&gt;

&lt;p&gt;It should be simple, as their &lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&quot;&gt;documentation&lt;/a&gt; is short and straightforward. First, I add a script tag to the basic layout that wraps my posts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script id=&quot;dsq-count-scr&quot; src=&quot;//estherleytush.disqus.com/count.js&quot; async&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Then for the pages I want to enable Disqus on, I add &lt;code class=&quot;highlighter-rouge&quot;&gt;comments: true&lt;/code&gt; to the YAML front matter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;published: true
comments: true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And finally, in my posts layout, I add this to the bottom of the page:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div id=&quot;disqus_thread&quot;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;script&amp;gt;
    (function() {
        var d = document, s = d.createElement(&#39;script&#39;);

        s.src = &#39;//estherleytush.disqus.com/embed.js&#39;;

        s.setAttribute(&#39;data-timestamp&#39;, +new Date());
        (d.head || d.body).appendChild(s);
    })();
&amp;lt;/script&amp;gt;
&amp;lt;noscript&amp;gt;Please enable JavaScript to view the &amp;lt;a href=&quot;https://disqus.com/?ref_noscript&quot; rel=&quot;nofollow&quot;&amp;gt;comments powered by Disqus.&amp;lt;/a&amp;gt;&amp;lt;/noscript&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Checked it out on my site and it’s there and looking super spiffy! There it is below :)&lt;/p&gt;
</description>
        <pubDate>Fri, 24 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2016/06/24/adding-comments-to-jekyll-site.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/24/adding-comments-to-jekyll-site.html</guid>
        
        
      </item>
    
      <item>
        <title>reddit_comments: my first gem</title>
        <description>&lt;p&gt;I’ve wanted to build a gem since I first heard about them, but didn’t find myself building any particular features or products that could be modularized and shared with others in this way. But this weekend, at AngelHack Brooklyn 2016, my team and I built &lt;a href=&quot;https://github.com/mindplace/Curator-a-&quot;&gt;Curator&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Curator uses the Reddit API and the NYTimes API to pull text data when queried with a search term. It uses this data to make a call to the HPE Haven OnDemand API, which parses and extracts concepts. These concepts are returned to the frontend, where the jQuery library jQCloud uses it to create beautiful word clouds displaying how the media vs individuals feel about the given search query.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the major problems we needed to solve was grabbing text from a Reddit post page with comments. Reddit’s commenting system is such that a user can make a comment on another comment, as well as on a post. So after battling http calls issues and figuring all that out, we were still left with a huge hash of comments with nested comments with nested comments.&lt;/p&gt;

&lt;p&gt;If you know me at all, you know that my ears perk up at these kinds of problems right away, because I am a bit of a fan of recursion. So I ended up spending a lot of time figuring out what data is given in this hash, and then designing a method to pull in those comments recursively:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recursive_comment_digging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;parent_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;parent_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;author&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;replies&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;recursive_comment_digging&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;comments&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Today I sat down and packaged up that functionality as a gem. It turned out to be a lot easier than I initially thought it would be. Essentially there were several parts to the job:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Deciding on scope: I decided that I wanted my gem to take a URL and return the comments posted on that Reddit page as an array of hashes.&lt;/li&gt;
  &lt;li&gt;Understanding what goes into building a gem: I found &lt;a href=&quot;http://railscasts.com/episodes/245-new-gem-with-bundler&quot;&gt;RailsCast’s post&lt;/a&gt; on building a gem with Bundler to be really helpful, as well as the official &lt;a href=&quot;http://guides.rubygems.org/rubygems-basics/&quot;&gt;RubyGems&lt;/a&gt; documentation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The biggest issue I faced was when I tried to push the gem to RubyGems.org. It turned out that because my terminal had been in the folder when I had built the gem initially to install and test locally, the compiled gem file ended up being inside the folders that contained the files to build it–but resolving this was as easy as deleting that file and building it outside of the folders entirely.&lt;/p&gt;

&lt;p&gt;Next step is refactoring and building some RSpec tests for this gem!&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jun 2016 20:00:00 -0400</pubDate>
        <link>http://yourdomain.com/2016/06/19/reddit-comments-my-first-gem.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/06/19/reddit-comments-my-first-gem.html</guid>
        
        
      </item>
    
      <item>
        <title>Bucket sort</title>
        <description>&lt;p&gt;I started off not really understanding how bucket sort works; the concept of partitioning
  items by placing them into different buckets made sense, but what is the way in which the
  program decides on bucket sizes? I couldn&#39;t understand the logic even when I looked at
  examples of others&#39; bucket sorts. So I decided to design my solution in a way that didn&#39;t
  pre-make buckets before partitioning. Instead, it sends items to their corresponding indexes&amp;mdash;so
  66 would be sent to &lt;code&gt;bucket[66]&lt;/code&gt;, etc.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/bed7e13afb85c22f321938a5ccd57967.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Does this still count as a bucket sort? Is this an example of another type of sorting
  algorithm? It makes sense and seems to be optimized for speed, as claiming new slots in
  an existing array should be faster than doing calculations to figure out where an item should go. Either way, it&#39;s simple and it works, so it&#39;s satisfying enough, even if it
  isn&#39;t an actual bucket sort.&lt;/p&gt;
</description>
        <pubDate>Tue, 05 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/05/bucket-sort.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/05/bucket-sort.html</guid>
        
        
      </item>
    
      <item>
        <title>JavaScript browser grocery list</title>
        <description>&lt;p&gt;My cohort is preparing for week 1 in Phase 1 as of next week, and it&#39;s all review this week.
  As part of that, I thought I would try branching out into using JavaScript in the browser. Here&#39;s
  a grocery list function that works, rather annoyingly, through pop-ups, alerting and prompting
  the user to the state of their grocery list.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/99027193d2cf15a319034d204c277133.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The more I work with JavaScript, the more irritating I find it. For example, when I tried running this
  script in the command line just to see if there were any syntax errors that I hadn&#39;t caught
  by eye, it refused to move past what I swear was a made-up error at line 2, which
  had not thrown an error previously, nor threw an error when I gave up and ran the code in
  the browser console directly. I keep having these struggles with JavaScript over what looks
  like absolutely nothing. I hope we come to terms with one another soon.&lt;/p&gt;

&lt;p&gt;That said, I was able to get a little more clarity in working with strings, objects, and
  loops in JavaScript, allowing for this second iteration to be a better laid out
  program.
&lt;/p&gt;
</description>
        <pubDate>Mon, 04 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/04/javascript-browser-grocery-list.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/04/javascript-browser-grocery-list.html</guid>
        
        
      </item>
    
      <item>
        <title>Binary conversions</title>
        <description>&lt;p&gt;One of the first computing concepts I was introduced to when I started learning to program was
  the concept of binary numbers. I had known already that computers understood everything on a
  fundamendal level in terms of binary code, but I hadn&#39;t understood how standard numbers in base-10, for example,
  could be understood in base-2. Converting numbers to their representations in different bases was
  a bizarre concept to me until I was shown me how they are broken down: how 111 turned
  into 7, for example. Once I finally worked through it mentally, I sat down and wrote two
  scripts to translate a base-10 number
  into base-2, and vice versa, and then rewrote these programs in JavaScript. To start, here&#39;s the Ruby
  script that converts a base-2 number into a base-10 one:&lt;/p&gt;
  &lt;script src=&quot;https://gist.github.com/mindplace/85e7052a78b70878ec103be9b24b6e2b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Understanding that the binary number needed to be reversed before it could be translated was an
  important part of conceptualizing it: that a binary number like 001 needs to be seen as 100 in order
  to be passed as a number to the program, but that 100 must then be reversed in order to be translated. Here&#39;s the
  same script in JavaScript:
&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/163fe26593fd000990dc95b860d02b31.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Conceptually, I&#39;ve been trying to stick to the same logic in Ruby as well as JavaScript; I&#39;m not sure if
  this really helps me branch out into the way JavaScript actually differs conceptually from Ruby, but it&#39;s
  certainly helped speed me up to solving algorithmic problems in JavaScript.&lt;/p&gt;
&lt;p&gt;So far the programs I wrote to convert a base-2 to base-10 numbers were short. By contrast,
  my solution for converting a base-10 to base-2 turned out to be much longer:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/6098697725c7c0dd6aed9bc615d37a56.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I couldn&#39;t think of how to slot in the appropriate 1&#39;s into their places without counting
  up in powers of 2, but that solution did work well. At some point I want to return to it and
  think about it again to see if I could solve it in a better way. Here&#39;s the same solution in
  JavaScript:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/740684d0745b8249bd4707d9064a26dd.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;That&#39;s all for today! Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Sun, 03 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/03/binary-conversions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/03/binary-conversions.html</guid>
        
        
      </item>
    
      <item>
        <title>Bootcamp blog: regular expressions</title>
        <description>&lt;p&gt;To say that using regular expressions is like hitting your face on the keyboard until something
  matches is not an entirely untrue statement, if you were to look at some examples:&lt;/p&gt;
&lt;p&gt;matching an IP address:&lt;br&gt;&lt;code&gt;\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;finding email addresses:&lt;br&gt; &lt;code&gt;\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}\b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;finding an &#39;Al&#39; next to the largest number in a text:&lt;br&gt;&lt;code&gt;\bAL\w*( \w\.)? S\w+ \d{2,},\d+&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I think the picture here is becoming clearer: Regular Expressions, or RegExps, are
  valuable, albeit indecipherable, strings of code that work to find or find-and-replace
  certain strings inside of other strings. They&#39;re useful when dealing with large strings,
  but also in a lot of other places. They&#39;re the tool of the power-user who parses text
  with minimal code and maximum results.&lt;/p&gt;
&lt;p&gt;The term &#39;regular expression&#39; was coined by Warren McCulloch and Walter Pitts, a neuroscientist and logician respectively, who in 1943 published a paper in Mathematical Biophysics which attempted to understand &#39;how the human brain could produce complex patterns using simple cells that are bound together&#39; (&lt;a href=&quot;http://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&quot;&gt;link&lt;/a&gt;). Among other ideas, the paper laid out the term Regular Expression, which by some amazing jump between disciplines came to influence computer scientists (as did various other ideas from other disciplines). In 1968, Ken Thompson descriped a RegExp compiler&amp;mdash;the idea was to allow users to match patterns in text files. This functionality was then implemented in the text editor &#39;ed&#39;. To do a RegExp search in ed, you had to write &lt;code&gt;g/&amp;lt;regular expression&amp;gt;/p&lt;/code&gt;: essentially, &lt;code&gt;g/re/p&lt;/code&gt;. &lt;code&gt;g&lt;/code&gt; meant &#39;global search&#39; and &lt;code&gt;p&lt;/code&gt; meant &#39;print&#39;, This command eventually resulted in a form we use &lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Enumerable.html#method-i-grep&quot;&gt;even in Ruby&lt;/a&gt;: &lt;code&gt;grep&lt;/code&gt;; we got it via Unix, and then Perl, but other languages like Java also implemented RegExps.
&lt;/p&gt;
&lt;p&gt;More honestly, RegExps are really a great and valuable tool. They tend to be difficult to remember, use, and understand, but also powerful and
often speedy. I have dipped the barest toe into the waters of regular expressions, but I intend to learn to use them myself with Ruby and text parsing.&lt;/p&gt;
&lt;hr&gt;

&lt;h3&gt;Resources:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://regex.bastardsbook.com/&quot;&gt;&lt;i&gt;The Bastards Book of Regular Expressions&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://regexone.com/&quot;&gt;RegexOne&lt;/a&gt;: an interactive tutorial&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://regexcrossword.com/&quot;&gt;Regex Crossword&lt;/a&gt;: regular expression challenges&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@leighsn/verbal-expressions-in-ruby-fb8a912221e2#.jzr5f62hl&quot;&gt;&quot;Verbal Expressions in Ruby&quot;&lt;/a&gt;: a gem to make regexes easier to write&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/categories/regular-expressions&quot;&gt;envatotuts+&lt;/a&gt;: regular
  expression tutorials&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://code.tutsplus.com/tutorials/you-dont-know-anything-about-regular-expressions--net-7869&quot;&gt;&quot;You Don&#39;t Know Anything About Regular Expressions: a Complete Guide&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.staffannoteberg.com/2013/01/30/regular-expressions-a-brief-history/&quot;&gt;
  &quot;Regular Expressions: a brief history&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://swtch.com/~rsc/regexp/regexp1.html&quot;&gt;&quot;Regular Expression Matching Can Be Simple And Fast (but is slow in Java, Perl, PHP, Python, Ruby, ...)&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Wikipedia: regular expression&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 02 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/02/bootcamp-blog-regular-expressions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/02/bootcamp-blog-regular-expressions.html</guid>
        
        
      </item>
    
      <item>
        <title>Bootcamp blog: enumerable cheatsheet</title>
        <description>&lt;p&gt;Today&#39;s post is a cheatsheet I did for week 8 of Dev Bootcamp. We&#39;re coming up quickly
now onto Phase1, the intense on-campus immersive phase, and we&#39;re all preparing ourselves
and our Ruby skills for that. This week was an introduction to SQL and some work in
JavaScript, Ruby, and HTML/CSS. Here&#39;s the page I made, see it yourself &lt;a href=&quot;http://mindplace.github.io/static-pages/cheat-sheet/enumerable-cheatsheet&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/blog/enumerable-cheatsheet.png&quot; width=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;I struggled for a very long time with the footer. I couldn&#39;t figure out how to have
  it stick to the bottom even if the page contents weren&#39;t enough to push it there naturally.
  In the end I couldn&#39;t figure it out and I shrugged my shoulders and fixed the rest of it
  to my liking. I&#39;m going to bring it up to a friend at bootcamp who has CSS experience.
  In the meantime, I&#39;m enjoying my other design choices.
&lt;/p&gt;
&lt;p&gt;
  The HTML and CSS is &lt;a href=&quot;https://github.com/mindplace/static-pages&quot;&gt;here&lt;/a&gt;.
&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Apr 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/04/01/bootcamp-blog-enumerable-cheatsheet.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/04/01/bootcamp-blog-enumerable-cheatsheet.html</guid>
        
        
      </item>
    
      <item>
        <title>Ruby inheritance and interconnected classes</title>
        <description>&lt;p&gt;To learn a bit more about inheritance in Ruby, we were given this assigment to work through, in
  which we modeled Dev Bootcamp&#39;s cohort structure and schedule. I created a GlobalCohort class,
  a sub-class to that called LocalCohort, which was city-specific, and an additional Student
  class. Here&#39;s GlobalCohort:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/e2be6ed10ac4a15b3e1c5db63cfea1fd.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;I think the interesting part for this class is the way it is able to model and give information
  about the phase schedule based on the start date. I&#39;ve worked with the Date class only a bit, when
  I created the &lt;a href=&quot;/2016/03/02/deadline-counter.html&quot;&gt;deadline counter&lt;/a&gt;, so this was a welcome continuation of that. And now
for LocalCohort:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/64a5705fd064d52049e7fb5887abe9fb.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;This class was meant to be much simpler; the important difference between it and GlobalCohort,
  in my design, was to make LocalCohort the location where I would add Student objects, so that
  students were always organized by their LocalCohorts, or cities. Now for Student:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/5ea54b21728f1eaf49b5c91204f330e4.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Also simple. This one needed to be able to store the student&#39;s information, like name, email, and
  history of events like quizzes, and to be able to know which global cohort and which city the
  student was going to belong to. Everything else was designed to be found for the entire group, and
  therefore stored in GlobalCohort. Output:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/mindplace/20c59c90cd03075efe99dd49ef9d295c.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Conceptually, this gave me a ton of problems, because I went into this challenge thinking that
  it was possible for instances in a class chain&amp;mdash;skippers to nyc to esther_leytush&amp;mdash;would be aware
  of each other in both directions, and have access to attributes. But of course this isn&#39;t the case;
  instances of Student don&#39;t and in fact should not have access to the attributes of instances of LocalCohort,
  for example, because they should not be able to change the LocalCohort&#39;s state. Once this clicked for me,
  I stopped getting so many &lt;code&gt;nil&lt;/code&gt; errors, which was nice. And I definitely think I got some
good practice with interconnected classes and modeling real-world scenarios.&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Mar 2016 14:56:27 -0400</pubDate>
        <link>http://yourdomain.com/2016/03/29/ruby-inheritance-and-interconnected-classes.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/29/ruby-inheritance-and-interconnected-classes.html</guid>
        
        
      </item>
    
  </channel>
</rss>
